{"ast":null,"code":"var _jsxFileName = \"/Users/wenruiqu/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections.overview.component';\nimport CollectionPage from '../collection/collection.component';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections'); // // Observer pattern\n    // collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   console.log(collectionsMap);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // });\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    });\n  } // ** React router property render allow us to pass props along side the component\n  // Usual: <Router path=\"/\" component={ShopPage}/> <- note we can't pass additional props to ShopPage\n  // New: <Router path=\"/\" render={(props)=> (<ShopPage isLoading={true} {...props})} <- passed isLoading props\n  // the (props) refers to the props that would've be passed by ROUTE to the component usually, so you have to spread them\n  // as well\n\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/wenruiqu/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","firestore","convertCollectionsSnapshotToMap","updateCollections","WithSpinner","CollectionsOverview","CollectionPage","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","get","then","snapshot","collectionsMap","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,MAAMC,8BAA8B,GAAGH,WAAW,CAACC,mBAAD,CAAlD;AACA,MAAMG,yBAAyB,GAAGJ,WAAW,CAACE,cAAD,CAA7C;;AAEA,MAAMG,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AACNC,MAAAA,OAAO,EAAE;AADH,KAD6B;AAAA,SAKrCC,uBALqC,GAKX,IALW;AAAA;;AAOrCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEX,MAAAA;AAAF,QAAwB,KAAKY,KAAnC;AACA,UAAMC,aAAa,GAAGf,SAAS,CAACgB,UAAV,CAAqB,aAArB,CAAtB,CAFkB,CAGlB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAE;AAC9B,YAAMC,cAAc,GAAGnB,+BAA+B,CAACkB,QAAD,CAAtD;AACHjB,MAAAA,iBAAiB,CAACkB,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAAEV,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAJD;AAKD,GAvBoC,CAyBrC;AACA;AACA;AACA;AACA;;;AACAW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKT,KAAvB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEa,KAAK,CAACC,IAAK,EAFtB;AAGE,MAAA,MAAM,EAAEV,KAAK,iBACX,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEH;AAA3C,SAAwDG,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAQE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAES,KAAK,CAACC,IAAK,gBADtB;AAEE,MAAA,MAAM,EAAEV,KAAK,iBACX,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEH;AAAtC,SAAmDG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAiBD;;AAlDoC;;AAqDvC,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACtCxB,EAAAA,iBAAiB,EAAEkB,cAAc,IAC/BM,QAAQ,CAACxB,iBAAiB,CAACkB,cAAD,CAAlB;AAF4B,CAAL,CAAnC;;AAKA,eAAerB,OAAO,CAAC,IAAD,EAAO0B,kBAAP,CAAP,CAAkCjB,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from '../../firebase/firebase.utils';\n\nimport { updateCollections } from '../../redux/shop/shop.actions';\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport CollectionsOverview from '../../components/collections-overview/collections.overview.component';\nimport CollectionPage from '../collection/collection.component';\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  state = {\n    loading: true,\n  };\n\n  unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { updateCollections } = this.props;\n    const collectionRef = firestore.collection('collections');\n    // // Observer pattern\n    // collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   console.log(collectionsMap);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // });\n    \n    collectionRef.get().then(snapshot=>{\n         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    })\n  }\n\n  // ** React router property render allow us to pass props along side the component\n  // Usual: <Router path=\"/\" component={ShopPage}/> <- note we can't pass additional props to ShopPage\n  // New: <Router path=\"/\" render={(props)=> (<ShopPage isLoading={true} {...props})} <- passed isLoading props\n  // the (props) refers to the props that would've be passed by ROUTE to the component usually, so you have to spread them\n  // as well\n  render() {\n    const { match } = this.props;\n    const { loading } = this.state;\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          render={props => (\n            <CollectionsOverviewWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={props => (\n            <CollectionPageWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap =>\n    dispatch(updateCollections(collectionsMap)),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}