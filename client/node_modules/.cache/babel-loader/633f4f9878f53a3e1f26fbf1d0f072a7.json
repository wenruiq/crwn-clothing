{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyAPWPHcsOWyWVDGFrt-YqYByoXbXNVGB0I',\n  authDomain: 'crwn-db-a3c28.firebaseapp.com',\n  databaseURL: 'https://crwn-db-a3c28.firebaseio.com',\n  projectId: 'crwn-db-a3c28',\n  storageBucket: 'crwn-db-a3c28.appspot.com',\n  messagingSenderId: '233115233448',\n  appId: '1:233115233448:web:56833d38a9e6763ae9a69d',\n  measurementId: 'G-RK2MV6JGQB'\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // if not logged in, return\n  if (!userAuth) return; // if not take a document snapshot using the auth id\n  // create a document reference first, we use auth id as id of the document here\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // take snapshot of reference using .get()\n\n  const snapShot = await userRef.get(); // if id doesnt exist in document snapshot, create it in the document\n\n  if (!snapShot.exists) {\n    // get data we want from userAuth object\n    const {\n      displayName,\n      email\n    } = userAuth; // get date\n\n    const createdAt = new Date(); //\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n}; // Use to add data to database\n\nexport const addCollectionAndDocument = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef); // use batch so if one request fails, the whole operation will fail, helps with data consistency\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // .doc() gives new doc ref with randomly generated id, because no arg is passed in\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\nconst convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName\n    };\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/wenruiqu/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocument","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: 'AIzaSyAPWPHcsOWyWVDGFrt-YqYByoXbXNVGB0I',\n  authDomain: 'crwn-db-a3c28.firebaseapp.com',\n  databaseURL: 'https://crwn-db-a3c28.firebaseio.com',\n  projectId: 'crwn-db-a3c28',\n  storageBucket: 'crwn-db-a3c28.appspot.com',\n  messagingSenderId: '233115233448',\n  appId: '1:233115233448:web:56833d38a9e6763ae9a69d',\n  measurementId: 'G-RK2MV6JGQB',\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // if not logged in, return\n  if (!userAuth) return;\n\n  // if not take a document snapshot using the auth id\n  // create a document reference first, we use auth id as id of the document here\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  // take snapshot of reference using .get()\n  const snapShot = await userRef.get();\n\n  // if id doesnt exist in document snapshot, create it in the document\n  if (!snapShot.exists) {\n    // get data we want from userAuth object\n    const { displayName, email } = userAuth;\n    // get date\n    const createdAt = new Date();\n\n    //\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n};\n\n\n// Use to add data to database\nexport const addCollectionAndDocument = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n\n  // use batch so if one request fails, the whole operation will fail, helps with data consistency\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // .doc() gives new doc ref with randomly generated id, because no arg is passed in\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nconst convertCollectionsSnapshotToMap = (collections)=>{\n  const transformedCollection = collections.docs.map(doc=>{\n    const {title, items} = doc.data();\n    \n    return{\n      routeName\n    }\n  })\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}